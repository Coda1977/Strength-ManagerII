Solution: Replace with Custom Modal
You should replace the confirm() call with a custom confirmation modal that stays within your app. Here's how to fix it:
Step 1: Add state for delete confirmation
javascriptconst [deleteConfirm, setDeleteConfirm] = useState<{
  show: boolean;
  conversationId: string | null;
  conversationTitle: string;
}>({ show: false, conversationId: null, conversationTitle: '' });
Step 2: Update the delete handler
javascriptconst handleDeleteConversation = async (conversationId: string, conversationTitle: string) => {
  // Instead of confirm(), show custom modal
  setDeleteConfirm({
    show: true,
    conversationId,
    conversationTitle
  });
};

const confirmDelete = async () => {
  if (!deleteConfirm.conversationId) return;
  
  try {
    const response = await fetch(`/api/conversations/${deleteConfirm.conversationId}`, {
      method: 'DELETE',
      credentials: 'include'
    });

    if (!response.ok) {
      throw new Error('Failed to delete conversation');
    }

    // Clear current chat if it's the one being deleted
    if (currentChatId === deleteConfirm.conversationId) {
      setCurrentChatId(null);
      setMessages([]);
    }

    // Close modal and refresh
    setDeleteConfirm({ show: false, conversationId: null, conversationTitle: '' });
    window.location.reload(); // You should replace this with proper state management
    
    toast({
      title: "Conversation Deleted",
      description: "The conversation has been permanently removed",
      duration: 2000
    });
  } catch (error) {
    console.error('Failed to delete conversation:', error);
    toast({
      title: "Delete Failed",
      description: "Could not delete the conversation. Please try again.",
      variant: "destructive"
    });
  }
};
Step 3: Add the custom modal to your JSX
javascript{/* Delete Confirmation Modal */}
{deleteConfirm.show && (
  <div className="modal active" onClick={() => setDeleteConfirm({ show: false, conversationId: null, conversationTitle: '' })}>
    <div className="modal-content" onClick={(e) => e.stopPropagation()}>
      <h3>Delete Conversation</h3>
      <p>Are you sure you want to delete "{deleteConfirm.conversationTitle}"?</p>
      <p style={{ color: '#dc2626', fontSize: '14px' }}>This action cannot be undone.</p>
      
      <div style={{ display: 'flex', gap: '1rem', justifyContent: 'flex-end', marginTop: '2rem' }}>
        <button
          onClick={() => setDeleteConfirm({ show: false, conversationId: null, conversationTitle: '' })}
          style={{
            padding: '0.75rem 1.5rem',
            border: '1px solid #D1D5DB',
            borderRadius: '8px',
            backgroundColor: '#FFFFFF',
            color: '#4A4A4A',
            cursor: 'pointer'
          }}
        >
          Cancel
        </button>
        <button
          onClick={confirmDelete}
          style={{
            padding: '0.75rem 1.5rem',
            border: 'none',
            borderRadius: '8px',
            backgroundColor: '#dc2626',
            color: '#FFFFFF',
            cursor: 'pointer'
          }}
        >
          Delete
        </button>
      </div>
    </div>
  </div>
)}
Step 4: Update the delete button call
javascript<button 
  className="delete-conversation-button"
  onClick={(e) => {
    e.stopPropagation();
    handleDeleteConversation(conversation.id, conversation.title); // Pass title too
  }}
  title="Delete conversation"
>
  üóëÔ∏è
</button>
This way, the confirmation dialog stays within your app's design system and doesn't break the user experience with external browser dialogs.